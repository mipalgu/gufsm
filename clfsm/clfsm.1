.TH Compiled Finite State Machine Scheduler {#mainpage}
.PP
\[rs]tableofcontents
.PP
\fB\fCclfsm\fR is a powerful scheduler for arrangements of compiled Objective\-C++ finite state machines.  It compiles (using clang) and schedules \fB\fC\&.machine\fR FSM bundles for deterministic low\-latency execution.
.SH Usage
.PP
\fB\fCclfsm [\-c][\-d][\-fPIC]{\-I includedir}{\-L linkdir}{\-l lib}[\-n]{\-P <machine>}[\-s]{\-S <machine>}[\-v] {machines}\fR
.PP
\fB\fC\-c\fR
 - compile only flag, don't execute machine.
.PP
\fB\fC\-fPIC\fR
 - specify to generate Position Independent Code, required by some machines.
.PP
\fB\fC\-I\fR \fIincludedir\fP
 - include directory to add to the search path during compilation.
.PP
\fB\fC\-L\fR \fIlinkdir\fP
 - library directory to add to the search path during linking.
.PP
\fB\fC\-l lib\fR
 - library to link against
.PP
\fB\fC\-n\fR
 - restart CLFSM after SIGABRT or SIGIOT signals.
.PP
\fB\fC\-P\fR
 - Preload a machine.
Load a machine and place it in memory,
but do not add it to the schedule.
This flag speeds up loading machines that are dynamically loaded
(and provides for more predictable timing when scheduling them).
Preloaded machines can be loaded and unloaded
using the dynamic loading function in CLMacros
(`loadAndAddMachine`, `scheduleMachine`,
`unscheduleMachineAtIndex`, `unloadMachineAtIndex`).
This is also advantageous when using parameterised machines
that are dynamically loaded
(when using `call_machine_at_path` for example).
.PP
\fB\fC\-s\fR
 - turn on debugging output on suspend, resume, and restart of machines.
.PP
\fB\fC\-S\fR
 - Loads a machine suspended.
This flag effectively sets the current state of the machine
to the machine's suspend state.
Note, that the entire ringlet of the suspend state executes
when the machine runs, including the OnEntry action in the
initial ringlet.
This flag is necessary when using parameterised machines
that are not dynamically loaded and should exist in the
schedule waiting to be called (when using
`call_static_machine_at` for example).
All machines scheduled with -S are currently placed at the
end of the schedule in the order that they are in when
invoking clfsm.
This may change to a position-dependent schedule in the future.
.PP
\fB\fC\-v\fR
 - Verbose: output MachineID, State, and name of machine for every state change
.PP
\fB\fC\-d\fR
 - print additional debug information (requires \fB\fC\-v\fR switch to be set as well).
.PP
\fImachines\fP
 - list of finite state machine bundles (with our without the \fB\fC\&.machine\fR extension) to compile and run.
.SH Examples
.PP
The following example shows how to run \fB\fCclfsm\fR, its output, and the backtrace produced when aborting the program by pressing \fB\fC^C\fR (Control\-C):
.PP
.RS
.nf
$ cd $GUNAO_DIR/posix/gufsm/clfsm/examples
$ ../build.host/clfsm \-I.. PingPongCLFSM
Ping 62
Pong 63
Ping 63
^CCaught signal 2: aborting ...
000: 0   clfsm                               0x000000010ec11b39 _ZL15print_backtracei + 73
001: 1   clfsm                               0x000000010ec115f3 _ZL24backtrace_signal_handleri + 19
002: 2   libsystem_platform.dylib            0x00007fff8c949f1a _sigtramp + 26
003: 3   ???                                 0x00007fff50ff9120 0x0 + 140734552314144
004: 4   libsystem_c.dylib                   0x00007fff91b1eb53 abort + 129
005: 5   clfsm                               0x000000010ec11a6a _ZL23aborting_signal_handleri + 794
006: 6   libsystem_platform.dylib            0x00007fff8c949f1a _sigtramp + 26
007: 7   ???                                 0x00007fff50ff98a0 0x0 + 140734552316064
008: 8   libsystem_c.dylib                   0x00007fff91b3fe50 usleep + 54
009: 9   clfsm                               0x000000010ec06697 protected_usleep + 87
010: 10  libclfsm.dylib                      0x000000010ec2a56d _ZN3FSM18CLFSMVectorFactory7executeEPFbPvPNS_18SuspensibleMachineEiES1_ + 61
011: 11  clfsm                               0x000000010ec11009 main + 6249
012: 12  libdyld.dylib                       0x00007fff8d2115c9 start + 1
Log file written to '/tmp/clfsm\-tJD.log'
Abort
Exit 134
$
.fi
.RE
.PP
In the above backtrace, the interesting line is \fB\fC008:\fR
this shows that the scheduler was currently in the sleep state between states
(\fB\fCprotected_usleep\fR in trace line \fB\fC009:\fR called from the state machine vector factory's \fB\fCexecute()\fR function).
.SH Bugs
.PP
All finite state machines currently need to be in the same directory as the current working directory \fB\fCclfsm\fR is run from.  A workaround is to use a symbolic link that points to the actual locations of the corresponding \fB\fC\&.machine\fR bundle directory.
.SH Compiling
.SS Building for the Host
.PP
The \fB\fCclfsm\fR tool requires \fB\fClibclfsm\fR to be compiled and installed in \fB\fC$PREFIX\fR
(typically \fB\fC/usr/local\fR) first.
Then, to build the \fB\fCclfsm\fR tool for the host use \fB\fCbmake host\fR\&.
To install under \fB\fC$PREFIX\fR, use \fB\fCsudo bmake install\fR
.SS Building for a Target
.PP
To build the tool for the default cross\-compilation target, simply use
\fB\fCbmake robot\fR\&.
Alternatively, to build the tool for a different target, use
\fB\fCbmake target TARGET=\fR\fItargetname\fP\&.
.SS Creating the ROS Makefile
.PP
In order to compile for ROS, you first need to
export the sources into \fB\fCcatkin_ws\fR for ROS using \fB\fCbmake catkin\fR\&.
Again, make sure that you have exported the \fB\fClibclfsm\fR catkin sources first!
.SH ROS
.PP
To build the tool for ROS, make sure you have copied the
sources into \fB\fCcatkin_ws\fR as described above, then simply use
\fB\fCcatkin_make\fR\&.
To permanently install the tool, use \fB\fCcatkin_make install\fR\&.
