<?xml version='1.0'?>
<!DOCTYPE qfsmproject SYSTEM "qfsm.dtd">
<qfsmproject version="0.53" author="MiCASE">
  <machine nummooreout="0" transfontitalic="0" draw_it="1" statefontsize="8" transfont="Helvetica" statefontitalic="0" author="Rene Hexel" description="" version="1" name="sonarFeedbackControlCLFSM" arrowtype="1" numbits="2" statefontweight="50" statefont="Helvetica" numin="0" transfontsize="8" transfontweight="50" type="3" numout="0" initialstate="0">
    <outputnames_moore></outputnames_moore>
    <inputnames></inputnames>
    <outputnames></outputnames>
    <itransition xpos="90" ypos="90" endx="90" endy="70"/>
    <state pencolor="0" linewidth="1" finalstate="0" moore_outputs="" radius="40" xpos="90" ypos="70" code="0" description="OnEntry$&#xa;{&#x0a;  using namespace std;&#x0a;  using namespace guWhiteboard;&#x0a;&#x0a;  stateName = &quot;INIT&quot;;&#x0a;  currentState = 0;&#x0a;  cout &lt;&lt; stateName &lt;&lt; endl;&#x0a;  wb= new Whiteboard();&#x0a;  &#x0a;   string inputString;&#x0a;&#x0a;          do {&#x0a;             cout &lt;&lt; &quot; ================================&quot; &lt;&lt; endl;&#x0a;             cout &lt;&lt; &quot; |  Enter a distance to stay at |&quot; &lt;&lt; endl;&#x0a;             cout &lt;&lt; &quot; |  (&quot; &lt;&lt; minDistance &lt;&lt; &quot;,&quot; &lt;&lt; maxDistance &lt;&lt; &quot;)                     |&quot; &lt;&lt; endl;&#x0a;             cout &lt;&lt; &quot; ================================&quot; &lt;&lt; endl&lt;&lt; endl &lt;&lt; endl;&#x0a;             getline(cin,inputString);&#x0a;             stringstream(inputString) &gt;&gt; distance;&#x0a;             cout &lt;&lt; &quot; You entered: &quot; &lt;&lt; distance &lt;&lt; endl;&#x0a;&#x0a;          } while ( (minDistance&gt;distance) || (maxDistance &lt; distance ) );&#x0a;&#x0a;}&#xa;$OnExit$&#xa;{&#x0a;&#x09;  using namespace std;&#x0a;         using namespace guWhiteboard;&#x0a;&#x09;string strPortId =&quot;3&quot;; &#x0a;&#x09;wb-&gt; addMessage(kDifferentialStartDistance, strPortId);&#x0a;  sleep(1); // don&#x27;t ever sleep (but this is just a test)!&#x0a;}&#xa;$Internal$&#xa;{&#x0a;  using namespace std;&#x0a;&#x0a;  cerr &lt;&lt; &quot;Internal state executed for &quot; &lt;&lt; stateName &lt;&lt; endl;&#x0a;  exit(EXIT_FAILURE);&#x0a;}&#xa;">INIT</state>
    <state pencolor="0" linewidth="1" finalstate="0" moore_outputs="" radius="40" xpos="662" ypos="119" code="1" description="OnEntry$&#xa;{&#x0a;  using namespace std;&#x0a;  using namespace guWhiteboard;&#x0a;&#x0a;&#x0a;  stateName = &quot;Back&quot;;&#x0a;  currentState = 2;&#x0a;  cout &lt;&lt; stateName &lt;&lt; endl;&#x0a;  wb-&gt; addMessage(kQSay,&quot;back&quot;);&#x0a; &#x0a;}&#xa;$OnExit$&#xa;{&#x0a; &#x0a;}&#xa;$Internal$&#xa;{&#x0a;  using namespace std;&#x0a;  using namespace guWhiteboard;&#x0a;&#x0a;   string strSonarPort = &quot;3&quot;;&#x0a;&#x0a;&#x0a;  WBMsg msg = wb-&gt; getMessage(kDifferentialDistanceValue +strSonarPort);&#x0a;&#x0a;  theDifference = distance-  msg.intValue();&#x0a;&#x0a;   cerr &lt;&lt; &quot; DIFFERRENCE: &quot; &lt;&lt;  theDifference &lt;&lt; endl;&#x0a;&#x0a;   int localPower=  theDifference*scaleFactor;&#x0a;&#x0a;   localPower = (localPower&gt; maxPower) ? maxPower :localPower;&#x0a;   localPower = (localPower&lt; minPower) ? minPower : localPower;&#x0a;   &#x0a;   &#x0a;    stringstream ss;  ss&lt;&lt; - localPower;&#x0a;    &#x0a;  string strL = &quot;1,&quot;+ ss.str();&#x0a;  string strR = &quot;0,&quot; + ss.str();&#x0a;&#x0a;&#x0a;  WBMsg msgL(strL);&#x0a;  WBMsg msgR(strR);&#x0a;&#x0a;  wb-&gt; addMessage(kDifferentialMotorPower, msgL);&#x0a;  wb-&gt; addMessage(kDifferentialMotorPower, msgR);;&#x0a;}&#xa;">GetBack</state>
    <state pencolor="0" linewidth="1" finalstate="0" moore_outputs="" radius="40" xpos="350" ypos="180" code="2" description="OnEntry$&#xa;{&#x0a;  using namespace std;&#x0a;  using namespace guWhiteboard;&#x0a;&#x0a;  stateName = &quot;GetCloser&quot;;&#x0a;  currentState = 1;&#x0a;  cout &lt;&lt; string( stateName ) &lt;&lt; endl;&#x0a;  wb-&gt; addMessage(kQSay,&quot;forwards&quot;);&#x0a;&#x0a;}&#xa;$OnExit$&#xa;{&#x0a;  &#x0a;}&#xa;$Internal$&#xa;{&#x0a;  using namespace std;&#x0a;  using namespace guWhiteboard;&#x0a;&#x0a;   string strSonarPort = &quot;3&quot;;&#x0a;&#x0a;&#x0a;  WBMsg msg = wb-&gt; getMessage(kDifferentialDistanceValue +strSonarPort);&#x0a;&#x0a;  theDifference = distance-  msg.intValue();&#x0a;&#x0a;   cerr &lt;&lt; &quot; DIFFERRENCE: &quot; &lt;&lt;  theDifference &lt;&lt; endl;&#x0a;&#x0a;   int localPower= - theDifference*scaleFactor;&#x0a;&#x0a;   localPower = (localPower&gt; maxPower) ? maxPower :localPower;&#x0a;   localPower = (localPower&lt; minPower) ? minPower : localPower;&#x0a;   &#x0a;   &#x0a;    stringstream ss;  ss&lt;&lt; localPower;&#x0a;    &#x0a;  string strL = &quot;1,&quot;+ ss.str();&#x0a;  string strR = &quot;0,&quot; + ss.str();&#x0a;&#x0a;&#x0a;  WBMsg msgL(strL);&#x0a;  WBMsg msgR(strR);&#x0a;&#x0a;  wb-&gt; addMessage(kDifferentialMotorPower, msgL);&#x0a;  wb-&gt; addMessage(kDifferentialMotorPower, msgR);&#x0a;&#x0a;&#x0a; &#x0a;}&#xa;">GetCLoser</state>
    <state pencolor="0" linewidth="1" finalstate="0" moore_outputs="" radius="40" xpos="638" ypos="301" code="3" description="OnEntry$&#xa;{&#x0a;  using namespace std;&#x0a;  using namespace guWhiteboard;&#x0a;&#x0a;  string strL = &quot;1,0&quot;;&#x0a;  string strR = &quot;0,-0&quot;;&#x0a;  WBMsg msgL(strL);&#x0a;  WBMsg msgR(strR);&#x0a;&#x0a;  stateName = &quot;Stop&quot;;&#x0a;  currentState = 3;&#x0a;  cout &lt;&lt; stateName &lt;&lt; endl;&#x0a;  wb-&gt; addMessage(kQSay,&quot;back&quot;);&#x0a;  wb-&gt; addMessage(kDifferentialMotorPower,msgL);&#x0a;  wb-&gt; addMessage(kDifferentialMotorPower,msgR);&#x0a;}&#xa;$OnExit$&#xa;{&#x0a;  sleep(3); // don&#x27;t ever sleep (but this is just a test)!&#x0a;}&#xa;$Internal$&#xa;{&#x0a;  using namespace std;&#x0a;&#x0a;  cerr &lt;&lt; &quot;Internal state executed for &quot; &lt;&lt; stateName &lt;&lt; endl;&#x0a;  exit(EXIT_FAILURE);&#x0a;}&#xa;">Stop</state>
    <transition xpos="125" ypos="85" endx="313" endy="164" c1x="161.698" c1y="120.388" c2x="276.461" c2y="128.448" straight="0" type="2">
      <from>0</from><to>2</to>
      <inputs default="0" any="0" invert="0">true</inputs><outputs></outputs>
    </transition>
    <transition xpos="622" ypos="126" endx="389" endy="185" c1x="566.09" c1y="148.015" c2x="446.734" c2y="201.654" straight="0" type="2">
      <from>1</from><to>2</to>
      <inputs default="0" any="0" invert="0">theDifference&lt;=0</inputs><outputs></outputs>
    </transition>
    <transition xpos="345" ypos="140" endx="622" endy="112" c1x="341.139" c1y="70.5043" c2x="557.237" c2y="86.4995" straight="0" type="2">
      <from>2</from><to>1</to>
      <inputs default="0" any="0" invert="0">theDifference&gt;0</inputs><outputs></outputs>
    </transition>
  </machine>
</qfsmproject>
