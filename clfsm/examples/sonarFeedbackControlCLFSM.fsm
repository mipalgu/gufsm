<?xml version='1.0'?>
<!DOCTYPE qfsmproject SYSTEM 'qfsm.dtd'>
<qfsmproject version="0.53" author="Qfsm">
  <machine nummooreout="0" transfontitalic="0" draw_it="1" statefontsize="8" transfont="Helvetica" statefontitalic="0" author="Rene Hexel" description="Includes$&#xa;#include &lt;iostream>&#xa;#include &lt;Whiteboard.h>&#xa;#include &lt;WhiteboardConstants.h>&#xa;#include &lt;signal.h>&#xa;const int maxDistance =40;&#xa;const int minDistance =10;&#xa;const int maxPower =100;&#xa;const int minPower =0;&#xa;&#xa;const int scaleFactor =5;&#xa;&#xa;&#xa;$Variables$&#xa;int&#x9;currentState;&#x9;// state no&#xa;guWhiteboard::Whiteboard *&#x9;wb;&#xa;int&#x9;theDifference;&#xa;int&#x9;distance;&#x9;&#x9;// target distance&#xa;" version="1" name="sonarFeedbackControlCLFSM" arrowtype="1" numbits="2" statefontweight="50" statefont="Helvetica" numin="0" transfontsize="8" transfontweight="50" type="3" numout="0" initialstate="0">
    <outputnames_moore></outputnames_moore>
    <inputnames></inputnames>
    <outputnames></outputnames>
    <itransition ypos="70" endx="50" xpos="-10" endy="70"/>
    <state pencolor="0" radius="40" description="Includes$&#xa;#include &lt;cstdlib>&#xa;#include &lt;unistd.h>&#xa;&#xa;$Variables$&#xa;const char *&#x9;stateName;&#x9;///&lt; name of the current state&#xa;&#xa;$OnEntry$&#xa;{&#xa;  using namespace std;&#xa;  using namespace guWhiteboard;&#xa;&#xa;  stateName = &quot;INIT&quot;;&#xa;  currentState = 0;&#xa;  cout &lt;&lt; stateName &lt;&lt; endl;&#xa;  wb= new Whiteboard();&#xa;  &#xa;   string inputString;&#xa;&#xa;          do {&#xa;             cout &lt;&lt; &quot; ================================&quot; &lt;&lt; endl;&#xa;             cout &lt;&lt; &quot; |  Enter a distance to stay at |&quot; &lt;&lt; endl;&#xa;             cout &lt;&lt; &quot; |  (&quot; &lt;&lt; minDistance &lt;&lt; &quot;,&quot; &lt;&lt; maxDistance &lt;&lt; &quot;)                     |&quot; &lt;&lt; endl;&#xa;             cout &lt;&lt; &quot; ================================&quot; &lt;&lt; endl&lt;&lt; endl &lt;&lt; endl;&#xa;             getline(cin,inputString);&#xa;             stringstream(inputString) >> distance;&#xa;             cout &lt;&lt; &quot; You entered: &quot; &lt;&lt; distance &lt;&lt; endl;&#xa;&#xa;          } while ( (minDistance>distance) || (maxDistance &lt; distance ) );&#xa;&#xa;}&#xa;&#xa;$OnExit$&#xa;{&#xa;&#x9;  using namespace std;&#xa;         using namespace guWhiteboard;&#xa;&#x9;string strPortId =&quot;3&quot;; &#xa;&#x9;wb-> addMessage(kDifferentialStartDistance, strPortId);&#xa;  sleep(1); // don't ever sleep (but this is just a test)!&#xa;}&#xa;&#xa;$Internal$&#xa;{&#xa;  using namespace std;&#xa;&#xa;  cerr &lt;&lt; &quot;Internal state executed for &quot; &lt;&lt; stateName &lt;&lt; endl;&#xa;  exit(EXIT_FAILURE);&#xa;}&#xa;" finalstate="0" moore_outputs="" ypos="70" code="0" xpos="90" linewidth="1">INIT</state>
    <state pencolor="0" radius="40" description="Includes$&#xa;#include &lt;cstdlib>&#xa;#include &lt;unistd.h>&#xa;&#xa;$Variables$&#xa;const char *&#x9;stateName;&#x9;///&lt; name of the current state&#xa;&#xa;$OnEntry$&#xa;{&#xa;  using namespace std;&#xa;  using namespace guWhiteboard;&#xa;&#xa;&#xa;  stateName = &quot;Back&quot;;&#xa;  currentState = 2;&#xa;  cout &lt;&lt; stateName &lt;&lt; endl;&#xa;  wb-> addMessage(kQSay,&quot;back&quot;);&#xa; &#xa;}&#xa;&#xa;$OnExit$&#xa;{&#xa;  sleep(3); // don't ever sleep (but this is just a test)!&#xa;}&#xa;&#xa;$Internal$&#xa;{&#xa;  using namespace std;&#xa;  using namespace guWhiteboard;&#xa;&#xa;   string strSonarPort = &quot;3&quot;;&#xa;&#xa;&#xa;  WBMsg msg = wb-> getMessage(kDifferentialDistanceValue +strSonarPort);&#xa;   cerr &lt;&lt; &quot;Value distance &quot; &lt;&lt;   msg.intValue() &lt;&lt; endl;&#xa;&#xa;  theDifference = distance-  msg.intValue();&#xa;&#xa;   int localPower=theDifference*scaleFactor;&#xa;&#xa;   localPower = (localPower> maxPower) ? maxPower :localPower;&#xa;   localPower = (localPower&lt; minPower) ? minPower : localPower;&#xa;&#xa;&#xa;  string strL = &quot;1,&quot;+localPower;&#xa;  string strR = &quot;0,&quot; + localPower;&#xa;&#xa;&#xa;  WBMsg msgL(strL);&#xa;  WBMsg msgR(strR);&#xa;&#xa;  wb-> addMessage(kDifferentialMotorPower, msgL);&#xa;  wb-> addMessage(kDifferentialMotorPower, msgR);&#xa;}&#xa;" finalstate="0" moore_outputs="" ypos="119" code="1" xpos="662" linewidth="1">GetBack</state>
    <state pencolor="0" radius="40" description="Includes$&#xa;#include &lt;cstdlib>&#xa;#include &lt;unistd.h>&#xa;#include &lt;sstream>&#xa;&#xa;$Variables$&#xa;const char *&#x9;stateName;&#x9;///&lt; name of the current state&#xa;&#xa;&#xa;$OnEntry$&#xa;{&#xa;  using namespace std;&#xa;  using namespace guWhiteboard;&#xa;&#xa;  stateName = &quot;GetCloser&quot;;&#xa;  currentState = 1;&#xa;  cout &lt;&lt; string( stateName ) &lt;&lt; endl;&#xa;  wb-> addMessage(kQSay,&quot;forwards&quot;);&#xa;&#xa;}&#xa;&#xa;$OnExit$&#xa;{&#xa;  sleep(3); // don't ever sleep (but this is just a test)!&#xa;}&#xa;&#xa;$Internal$&#xa;{&#xa;  using namespace std;&#xa;  using namespace guWhiteboard;&#xa;&#xa;   string strSonarPort = &quot;3&quot;;&#xa;&#xa;&#xa;  WBMsg msg = wb-> getMessage(kDifferentialDistanceValue +strSonarPort);&#xa;&#xa;  theDifference = distance-  msg.intValue();&#xa;&#xa;   cerr &lt;&lt; &quot; DIFFERRENCE: &quot; &lt;&lt;  theDifference &lt;&lt; endl;&#xa;&#xa;   int localPower= - theDifference*scaleFactor;&#xa;&#xa;   localPower = (localPower> maxPower) ? maxPower :localPower;&#xa;   localPower = (localPower&lt; minPower) ? minPower : localPower;&#xa;   localPower= - localPower;&#xa;   &#xa;    stringstream ss;  ss&lt;&lt; localPower;&#xa;    &#xa;  string strL = &quot;1,&quot;+ ss.str();&#xa;  string strR = &quot;0,&quot; + ss.str();&#xa;&#xa;&#xa;  WBMsg msgL(strL);&#xa;  WBMsg msgR(strR);&#xa;&#xa;  wb-> addMessage(kDifferentialMotorPower, msgL);&#xa;  wb-> addMessage(kDifferentialMotorPower, msgR);&#xa;&#xa;&#xa; &#xa;}&#xa;" finalstate="0" moore_outputs="" ypos="180" code="2" xpos="350" linewidth="1">GetCLoser</state>
    <state pencolor="0" radius="40" description="Includes$&#xa;#include &lt;cstdlib>&#xa;#include &lt;unistd.h>&#xa;&#xa;$Variables$&#xa;const char *&#x9;stateName;&#x9;///&lt; name of the current state&#xa;&#xa;$OnEntry$&#xa;{&#xa;  using namespace std;&#xa;  using namespace guWhiteboard;&#xa;&#xa;  string strL = &quot;1,0&quot;;&#xa;  string strR = &quot;0,-0&quot;;&#xa;  WBMsg msgL(strL);&#xa;  WBMsg msgR(strR);&#xa;&#xa;  stateName = &quot;Stop&quot;;&#xa;  currentState = 3;&#xa;  cout &lt;&lt; stateName &lt;&lt; endl;&#xa;  wb-> addMessage(kQSay,&quot;back&quot;);&#xa;  wb-> addMessage(kDifferentialMotorPower,msgL);&#xa;  wb-> addMessage(kDifferentialMotorPower,msgR);&#xa;}&#xa;&#xa;$OnExit$&#xa;{&#xa;  sleep(3); // don't ever sleep (but this is just a test)!&#xa;}&#xa;&#xa;$Internal$&#xa;{&#xa;  using namespace std;&#xa;&#xa;  cerr &lt;&lt; &quot;Internal state executed for &quot; &lt;&lt; stateName &lt;&lt; endl;&#xa;  exit(EXIT_FAILURE);&#xa;}&#xa;" finalstate="0" moore_outputs="" ypos="301" code="3" xpos="638" linewidth="1">Stop</state>
    <transition c1x="188.332252" c2y="138.008253" c1y="111.602107" description="" straight="1" type="2" ypos="85.19595964263122" endx="313.1613099572576" xpos="125.9177227916738" endy="164.4144003665321" c2x="250.746781">
      <from>0</from>
      <to>2</to>
      <inputs default="0" any="0" invert="0">true</inputs>
      <outputs></outputs>
    </transition>
    <transition c1x="595.988170" c2y="205.239410" c1y="141.753026" description="" straight="0" type="2" ypos="126.290187422537" endx="389.6196909271101" xpos="622.669945749538" endy="185.5027348509875" c2x="419.810731">
      <from>1</from>
      <to>2</to>
      <inputs default="0" any="0" invert="0">theDifference&lt;=0</inputs>
      <outputs></outputs>
    </transition>
    <transition c1x="400.930675" c2y="101.263325" c1y="128.455716" description="" straight="0" type="2" ypos="140.2087424555579" endx="622.5484472986118" xpos="345.9188453800572" endy="112.3988645333101" c2x="584.808960">
      <from>2</from>
      <to>1</to>
      <inputs default="0" any="0" invert="0">theDifference>0</inputs>
      <outputs></outputs>
    </transition>
  </machine>
</qfsmproject>
