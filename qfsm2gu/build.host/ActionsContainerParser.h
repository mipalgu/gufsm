/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /Users/rh/Devel/src/MiPal/GUNao/posix/gufsm/qfsm2gu/../LANGUAGE/ActionsContainer.g
 *     -                            On : 2014-10-12 07:13:11
 *     -                for the parser : ActionsContainerParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
ActionsContainerParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pActionsContainerParser, which is returned from a call to ActionsContainerParserNew().
 *
 * The methods in pActionsContainerParser are  as follows:
 *
 *  - 
 ActionsContainerParser_actions_return
      pActionsContainerParser->actions(pActionsContainerParser)
 *  - 
 ActionsContainerParser_state_description_return
      pActionsContainerParser->state_description(pActionsContainerParser)
 *  - 
 ActionsContainerParser_description_return
      pActionsContainerParser->description(pActionsContainerParser)
 *  - 
 ActionsContainerParser_onEntry_part_return
      pActionsContainerParser->onEntry_part(pActionsContainerParser)
 *  - 
 ActionsContainerParser_onExit_part_return
      pActionsContainerParser->onExit_part(pActionsContainerParser)
 *  - 
 ActionsContainerParser_internal_part_return
      pActionsContainerParser->internal_part(pActionsContainerParser)
 *  - 
 ActionsContainerParser_state_name_return
      pActionsContainerParser->state_name(pActionsContainerParser)
 *  - 
 ActionsContainerParser_state_id_return
      pActionsContainerParser->state_id(pActionsContainerParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_ActionsContainerParser_H
#define _ActionsContainerParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct ActionsContainerParser_Ctx_struct ActionsContainerParser, * pActionsContainerParser;

// Include delegate definition header files
//
#include	<ActionsContainer_SimpleCParser.h>




#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct ActionsContainerParser_actions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ActionsContainerParser_actions_return;



typedef struct ActionsContainerParser_state_description_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ActionsContainerParser_state_description_return;



typedef struct ActionsContainerParser_description_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ActionsContainerParser_description_return;



typedef struct ActionsContainerParser_onEntry_part_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ActionsContainerParser_onEntry_part_return;



typedef struct ActionsContainerParser_onExit_part_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ActionsContainerParser_onExit_part_return;



typedef struct ActionsContainerParser_internal_part_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ActionsContainerParser_internal_part_return;



typedef struct ActionsContainerParser_state_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ActionsContainerParser_state_name_return;



typedef struct ActionsContainerParser_state_id_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ActionsContainerParser_state_id_return;




/** Context tracking structure for 
ActionsContainerParser

 */
struct ActionsContainerParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;
	pActionsContainer_SimpleCParser	gSimpleCParser;

     ActionsContainerParser_actions_return
     (*actions)	(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainerParser_state_description_return
     (*state_description)	(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainerParser_description_return
     (*description)	(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainerParser_onEntry_part_return
     (*onEntry_part)	(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainerParser_onExit_part_return
     (*onExit_part)	(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainerParser_internal_part_return
     (*internal_part)	(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainerParser_state_name_return
     (*state_name)	(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainerParser_state_id_return
     (*state_id)	(struct ActionsContainerParser_Ctx_struct * ctx);
    // Delegated rules
     ActionsContainer_SimpleCParser_statement_return
 (*statement)(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainer_SimpleCParser_functionCallOrVariable_return
 (*functionCallOrVariable)(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainer_SimpleCParser_program_return
 (*program)(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainer_SimpleCParser_block_return
 (*block)(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainer_SimpleCParser_assignStat_return
 (*assignStat)(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainer_SimpleCParser_literal_return
 (*literal)(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainer_SimpleCParser_type_return
 (*type)(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainer_SimpleCParser_term_return
 (*term)(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainer_SimpleCParser_variable_return
 (*variable)(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainer_SimpleCParser_atom_return
 (*atom)(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainer_SimpleCParser_expr_return
 (*expr)(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainer_SimpleCParser_functionHeader_return
 (*functionHeader)(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainer_SimpleCParser_aexpr_return
 (*aexpr)(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainer_SimpleCParser_declarator_return
 (*declarator)(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainer_SimpleCParser_formalParameter_return
 (*formalParameter)(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainer_SimpleCParser_condExpr_return
 (*condExpr)(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainer_SimpleCParser_orexpr_return
 (*orexpr)(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainer_SimpleCParser_declaration_return
 (*declaration)(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainer_SimpleCParser_forStat_return
 (*forStat)(struct ActionsContainerParser_Ctx_struct * ctx);

     ActionsContainer_SimpleCParser_andexpr_return
 (*andexpr)(struct ActionsContainerParser_Ctx_struct * ctx);

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct ActionsContainerParser_Ctx_struct * ctx);
    void	    (*free)   (struct ActionsContainerParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pActionsContainerParser ActionsContainerParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pActionsContainerParser ActionsContainerParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define ARG_DEF      4
#define BLOCK      5
#define EOL      6
#define EscapeSequence      7
#define FUNC_DECL      8
#define FUNC_DEF      9
#define FUNC_HDR      10
#define INTERNALPART      11
#define K_ANDAND      12
#define K_BOOL      13
#define K_CHAR      14
#define K_COMMA      15
#define K_DIV      16
#define K_EQ      17
#define K_EQEQ      18
#define K_EXTERN      19
#define K_FOR      20
#define K_GT      21
#define K_ID      22
#define K_INT      23
#define K_INT_TYPE      24
#define K_LCURLY      25
#define K_LCURVE      26
#define K_LT      27
#define K_MINUS      28
#define K_NEQ      29
#define K_NOT      30
#define K_OROR      31
#define K_PLUS      32
#define K_RCURLY      33
#define K_RCURVE      34
#define K_SEMICOLON      35
#define K_TIMES      36
#define K_VOID      37
#define ONENTRY      38
#define ONEXIT      39
#define STATEMENT_LIST      40
#define STATENAME      41
#define STRING_GUTS      42
#define STRING_LITERAL      43
#define VAR_DEF      44
#define WS      45
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for ActionsContainerParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
